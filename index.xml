<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&gt;&gt;&gt; python4you</title>
    <link>artemrys.github.io/</link>
    <description>Recent content on &gt;&gt;&gt; python4you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Feb 2019 15:09:32 +0200</lastBuildDate><atom:link href="artemrys.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ Scrapy Item Publisher in Python</title>
      <link>artemrys.github.io/posts/rabbitmq-scrapy-item-publisher-in-python/</link>
      <pubDate>Tue, 26 Feb 2019 15:09:32 +0200</pubDate>
      
      <guid>artemrys.github.io/posts/rabbitmq-scrapy-item-publisher-in-python/</guid>
      <description>It’s a small note about the Scrapy Item Pipeline that publishes a Scrapy Item to the RabbitMQ.
If you are interested in parsing/scraping projects in Python, you should know about Scrapy. Let’s imagine that your project is something bigger than a one-time data extraction. This means that you need to do something with your data. One of the possible approaches is to use RabbitMQ to publish items to some queue. This method can help you to build a custom consumer that can process Scrapy items.</description>
    </item>
    
    <item>
      <title>Calling Celery Tasks not from Python</title>
      <link>artemrys.github.io/posts/calling-celery-tasks-not-from-python/</link>
      <pubDate>Mon, 21 Jan 2019 10:00:32 +0200</pubDate>
      
      <guid>artemrys.github.io/posts/calling-celery-tasks-not-from-python/</guid>
      <description>Python IO streams: BytesIO and StringIO in practice.
Celery is probably the most popular task queue/job queue in Python.
Often you call Celery tasks from Python code. But! You can have a situation when you need to run Celery tasks from another language. The obvious solution is to have a web server (Flask / Django / etc) neer to your Celery code and execute tasks through API calls. But! This is not the ultimate solution.</description>
    </item>
    
    <item>
      <title>Python IO streams in examples</title>
      <link>artemrys.github.io/posts/python-io-streams-in-examples/</link>
      <pubDate>Wed, 19 Dec 2018 11:12:32 +0200</pubDate>
      
      <guid>artemrys.github.io/posts/python-io-streams-in-examples/</guid>
      <description>Python IO streams: BytesIO and StringIO in practice.
We’ll be using Python IO streams: BytesIO and StringIO to execute some tasks from the real world: sending a photo to Telegram Bot and get configuration from Netflix Config Server (now it’s a part of Spring Cloud).
We are going to cover 2 different stream classes:
 BytesIO — expects binary-like objects and produces bytes objects StringIO — expects and produces str objects  BytesIO For example, you are writing a Telegram bot that sends your user photos from Unsplash website.</description>
    </item>
    
    <item>
      <title>Creating Telegram Bot and Deploying it to Heroku</title>
      <link>artemrys.github.io/posts/creating-telegram-bot-and-deploying-it-on-heroku/</link>
      <pubDate>Sat, 15 Dec 2018 18:00:32 +0200</pubDate>
      
      <guid>artemrys.github.io/posts/creating-telegram-bot-and-deploying-it-on-heroku/</guid>
      <description>In this tutorial, we’ll create a simple Telegram Bot using python-telegram-bot and deploy it to Heroku using Heroku Container Registry and Docker.
All source code is available in Github repository.
Commands Our bot has 2 commands: /start and /random.
 Command /start says hello to our new users Command /random sends the random number to the user  Bot import logging import os import random import sys from telegram.ext import Updater, CommandHandler # Enabling logging logging.</description>
    </item>
    
    <item>
      <title>Python exception handling and sys.exit magic</title>
      <link>artemrys.github.io/posts/python-try-except-finally-sys-exit-magic/</link>
      <pubDate>Tue, 11 Dec 2018 12:11:32 +0200</pubDate>
      
      <guid>artemrys.github.io/posts/python-try-except-finally-sys-exit-magic/</guid>
      <description>Some Python magic around sys.exit() function.
Recently I’ve been at the interview for one big Israel startup. They asked me to read the code below and say what will be in the output.
import sys def some_func(): ... def _child_process(target): try: target() sys.exit(0) except: print(&amp;#34;Exception&amp;#34;) sys.exit(1) finally: print(&amp;#34;Out&amp;#34;) try: _child_process(some_func) finally: print(&amp;#34;Out2&amp;#34;)  What do you think to be the output after running this code snippet? Is it depend on the body of some_func function?</description>
    </item>
    
  </channel>
</rss>
